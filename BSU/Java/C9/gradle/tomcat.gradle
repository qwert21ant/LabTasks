def CATALINA_HOME = System.getenv("CATALINA_HOME")

def CATALINA_CLASSPATH = ant.path {
    fileset(dir: CATALINA_HOME + "/lib", includes: "*.jar")
    fileset(dir: CATALINA_HOME + "/bin", includes: "*.jar")
}

ant.taskdef(
    resource: "org/apache/catalina/ant/catalina.tasks",
    classpath: CATALINA_CLASSPATH,
)

def PROJECT_NAME = "ad"

def MANAGER_URL = "http://localhost:8080/manager/text"
def MANAGER_USERNAME = "admin"
def MANAGER_PASSWORD = "admin"

def TOMCAT_SERVICE_NAME = "Tomcat10"

def SOURCE_APP_PATH = "src/main/webapp"
def BUILD_APP_PATH = "build/app"
def JAVA_JSP_PATH = "build/jasper"

configurations {
    webapp

    compileClasspath.extendsFrom(webapp)
    runtimeClasspath.extendsFrom(webapp)

    jasper
    jasper.extendsFrom(webapp)
}


tasks.named("processResources") {
    from(files(SOURCE_APP_PATH))
}

dependencies {
    jasper fileTree(CATALINA_HOME + "/lib") { include "*.jar" }
}

sourceSets {
    jasper {
        java {
            srcDir file(JAVA_JSP_PATH)
        }

        compileClasspath += configurations.jasper
        runtimeClasspath += configurations.jasper

        compileClasspath += main.output
        runtimeClasspath += main.output
    }
}

tasks.register("start", Exec) {
    group "tomcat service"

    commandLine "powershell", "-Command", "start-service", TOMCAT_SERVICE_NAME
}

tasks.register("stop", Exec) {
    group "tomcat service"

    commandLine "powershell", "-Command", "stop-service", TOMCAT_SERVICE_NAME
}

tasks.register("copyDeps", Copy) {
    from configurations.webapp
    into file("${BUILD_APP_PATH}/WEB-INF/lib")
}

tasks.register("copyMainClasses", Copy) {
    dependsOn "classes"

    from sourceSets.main.output
    into file("${BUILD_APP_PATH}/WEB-INF/classes")

    include "**/*.class"
}

tasks.register("copyWebContent", Copy) {
    from file(SOURCE_APP_PATH)
    into file(BUILD_APP_PATH)
}

tasks.register("jasper") {
    dependsOn "copyDeps", "copyWebContent", "copyMainClasses"
    group "tomcat"

    doLast {
        ant.jasper(
            uriroot: file(BUILD_APP_PATH),
            outputDir: file(JAVA_JSP_PATH)
        )
    }
}

tasks.named("compileJasperJava") {
    mustRunAfter "jasper"
}

tasks.register("copyJasperClasses", Copy) {
    dependsOn "jasperClasses"

    mustRunAfter "jasper"

    from sourceSets.jasper.output
    into file("${BUILD_APP_PATH}/WEB-INF/classes")
}

tasks.register("buildJSP") {
    dependsOn "jasper", "copyJasperClasses"
}

tasks.register("deploy") {
    dependsOn "buildJSP"
    group "tomcat"

    mustRunAfter "remove" // for restart task

    doLast {
        ant.deploy(
            url: MANAGER_URL,
            username: MANAGER_USERNAME,
            password: MANAGER_PASSWORD,
            path: "/${PROJECT_NAME}",
            localWar: "file://${file(BUILD_APP_PATH)}"
        )
    }
}

tasks.register("remove") {
    group "tomcat"

    doLast {
        ant.undeploy(
            url: MANAGER_URL,
            username: MANAGER_USERNAME,
            password: MANAGER_PASSWORD,
            path: "/${PROJECT_NAME}"
        )
    }
}

tasks.register("reload") {
    group "tomcat"

    doLast {
        ant.reload(
            url: MANAGER_URL,
            username: MANAGER_USERNAME,
            password: MANAGER_PASSWORD,
            path: "/${PROJECT_NAME}"
        )
    }
}

tasks.register("redeploy") {
    dependsOn "deploy", "remove"
    group "tomcat"
}